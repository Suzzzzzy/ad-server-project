// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	model "ad-server-project/src/domain/model"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// RewardDetailUsecase is an autogenerated mock type for the RewardDetailUsecase type
type RewardDetailUsecase struct {
	mock.Mock
}

// DeductRewardDetail provides a mock function with given fields: c, reward, userId
func (_m *RewardDetailUsecase) DeductRewardDetail(c context.Context, reward int, userId int) error {
	ret := _m.Called(c, reward, userId)

	if len(ret) == 0 {
		panic("no return value specified for DeductRewardDetail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) error); ok {
		r0 = rf(c, reward, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EarnRewardDetail provides a mock function with given fields: c, adId, reward, userId
func (_m *RewardDetailUsecase) EarnRewardDetail(c context.Context, adId int, reward int, userId int) error {
	ret := _m.Called(c, adId, reward, userId)

	if len(ret) == 0 {
		panic("no return value specified for EarnRewardDetail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int) error); ok {
		r0 = rf(c, adId, reward, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRecent provides a mock function with given fields: c, userId
func (_m *RewardDetailUsecase) GetRecent(c context.Context, userId int) ([]model.RewardDetail, error) {
	ret := _m.Called(c, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetRecent")
	}

	var r0 []model.RewardDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]model.RewardDetail, error)); ok {
		return rf(c, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []model.RewardDetail); ok {
		r0 = rf(c, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.RewardDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(c, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRewardBalance provides a mock function with given fields: c, userId
func (_m *RewardDetailUsecase) GetRewardBalance(c context.Context, userId int) (int, error) {
	ret := _m.Called(c, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetRewardBalance")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (int, error)); ok {
		return rf(c, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) int); ok {
		r0 = rf(c, userId)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(c, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRewardDetailUsecase creates a new instance of RewardDetailUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRewardDetailUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *RewardDetailUsecase {
	mock := &RewardDetailUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
